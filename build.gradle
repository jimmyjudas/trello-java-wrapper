plugins {
    id 'cl.franciscosolis.sonatype-central-upload' version '1.0.2'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'java'
}

group = 'io.github.proteus1121'
version = System.getenv("VERSION")

description = """Trello Java Wrapper"""

// java sources are added to Scala compile phase and removed from Java compile.
// this solution is fix java->scala dependency issue
// see  https://discuss.gradle.org/t/how-to-compile-a-java-class-that-depends-on-a-scala-class-in-gradle/6747

sourceCompatibility = 11
targetCompatibility = 11
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations.all {
}

repositories {
     mavenCentral()
}

ext {
    scalaBinaryVersion = '2.12'
    scalaFullVersion = '2.12.2'
    httpClientVersion = '4.5.7'
    okhttpVersion = '3.12.1'
    springWebVersion = '3.2.2.RELEASE'
    jacksonVersion = '2.9.8'
    slf4jVersion = '1.7.25'
}

dependencies {
    implementation (
            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.apache.httpcomponents:httpmime:${httpClientVersion}"
    )

    compileOnly (
            "org.springframework:spring-web:${springWebVersion}",
            "org.apache.httpcomponents:httpclient:${httpClientVersion}",
            "com.ning:async-http-client:1.7.19",
            "org.asynchttpclient:async-http-client:2.5.2",
            "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    )

    testImplementation (
            "org.springframework:spring-web:${springWebVersion}",
            "org.apache.httpcomponents:httpclient:${httpClientVersion}",
            "com.ning:async-http-client:1.7.19",
            "org.asynchttpclient:async-http-client:2.5.2",
            "com.squareup.okhttp3:okhttp:${okhttpVersion}",
            "org.easytesting:fest-assert:1.4",
            "junit:junit:4.12",
            "org.mockito:mockito-all:1.9.5",
            "org.scala-lang:scala-library:${scalaFullVersion}",
            "org.scalatest:scalatest_${scalaBinaryVersion}:3.0.0"
    )
}

task generatePom {
    doLast {
        def pomFile = file('pom.xml')
        pom {
            project {
                name 'Trello Java API'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                url 'https://github.com/proteus1121/trello-java-wrapper'
                description 'Java API for Trello'
                developers {
                    developer {
                        name 'Alexey Skorokhodov'
                        email 'alskor@gmail.com'
                    }
                }
                scm {
                    connection 'scm:git:git://github.com/proteus1121/trello-java-wrapper.git'
                    tag 'HEAD'
                    // A publicly browsable repository. For example, via ViewCVS
                    url 'http://github.com/proteus1121/trello-java-wrapper/tree/master/'
                }

                issueManagement {
                    system 'github'
                    url 'http://github.com/proteus1121/trello-java-wrapper/issues'
                }
            }
        }.writeTo(pomFile)
    }
}

task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// turn off strict Javadoc checks in Java8 that break the build.
// http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
// minor Javadoc issues are not important enough to justify breaking the build.
// adding Captain-Obvious-style garbage javadoc for params just to satisfy this build check is not useful.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

// A PGP key is required to sign the artifacts before uploading to OSS Sonatype Maven repository.
// Put the PGP key info in your <home>/.gradle/gradle.properties file:
// signing.keyId=...
// signing.password=...
// signing.secretKeyRingFile=c:/Users/ask/.gnupg/secring.gpg
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// password can be set in gradle.properties or environment variable (check "build environment" on Jenkins)
def ossUserVar = hasProperty("ossUser") ? ossUser : ""
def ossPasswordVar = hasProperty("ossPassword") ? ossPassword : ""

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: ossUserVar, password: ossPasswordVar)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: ossUserVar, password: ossPasswordVar)
            }

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.project {
                name 'Trello Java API'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                url 'https://github.com/proteus1121/trello-java-wrapper'
                description 'Java API for Trello'
                developers {
                    developer {
                        name 'Alexey Skorokhodov'
                        email 'alskor@gmail.com'
                    }
                    developer {
                        name 'Artem Ishchenko'
                        email 'artem.ischchenko@gmail.com'
                    }
                }
                scm {
                    connection 'scm:git:git://github.com/proteus1121/trello-java-wrapper.git'
                    tag 'HEAD'
                    // A publicly browsable repository. For example, via ViewCVS
                    url 'http://github.com/proteus1121/trello-java-wrapper/tree/master/'
                }

                issueManagement {
                    system 'github'
                    url 'http://github.com/proteus1121/trello-java-wrapper/issues'
                }
            }
        }
    }
}

sonatypeCentralUpload {
    username = System.getenv("SONATYPE_USERNAME")
    password = System.getenv("SONATYPE_PASSWORD")

    archives = files(
            "build/libs/trello-java-wrapper-" + System.getenv("VERSION") + ".jar",
            "build/libs/trello-java-wrapper-" + System.getenv("VERSION") + "-javadoc.jar",
            "build/libs/trello-java-wrapper-" + System.getenv("VERSION") + "-sources.jar")
    pom = file("pom.xml")

    publicKey = System.getenv("PUBLIC_KEY")
    signingKeyPassphrase = System.getenv("SIGNING_KEY_PASSWORD")
    signingKey = System.getenv("PRIVATE_KEY")
}

// this section is used by "install" command to publish to local Maven repo
artifacts {
    archives packageSources, packageJavadoc
}
